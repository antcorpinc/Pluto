// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Pluto.Data;
using Pluto.Models.Enums;
using System;

namespace Pluto.Data.Migrations
{
    [DbContext(typeof(PlutoContext))]
    [Migration("20171029012316_UpdatedModelRelationships")]
    partial class UpdatedModelRelationships
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Pluto.Models.FeatureType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<int?>("Order");

                    b.Property<int?>("ParentFeatureId");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("FeatureType");
                });

            modelBuilder.Entity("Pluto.Models.FormInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FormInstanceContent");

                    b.Property<int>("FormStatusId");

                    b.Property<int>("FormTypeId");

                    b.Property<Guid>("InputterId");

                    b.Property<int?>("NextApproverOrder");

                    b.Property<Guid?>("ParentFormId");

                    b.Property<Guid>("SocietyId");

                    b.Property<DateTime?>("WorkflowCompletedDate");

                    b.HasKey("Id");

                    b.HasIndex("FormStatusId");

                    b.HasIndex("FormTypeId");

                    b.HasIndex("SocietyId");

                    b.ToTable("FormInstance");
                });

            modelBuilder.Entity("Pluto.Models.FormInstanceApprover", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ApprovedByUserId");

                    b.Property<string>("Comments");

                    b.Property<Guid>("FormInstanceId");

                    b.Property<bool>("IsApproved");

                    b.Property<int>("Order");

                    b.Property<string>("RejectionReason");

                    b.Property<string>("Role");

                    b.Property<Guid>("SelectedUserId");

                    b.HasKey("Id");

                    b.HasIndex("FormInstanceId");

                    b.ToTable("FormInstanceApprover");
                });

            modelBuilder.Entity("Pluto.Models.FormStatus", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("FormStatus");
                });

            modelBuilder.Entity("Pluto.Models.FormType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("FormType");
                });

            modelBuilder.Entity("Pluto.Models.FormTypeRolePrivilege", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FormTypeId");

                    b.Property<string>("Privileges");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("FormTypeId");

                    b.HasIndex("RoleId");

                    b.ToTable("FormTypeRolePrivilege");
                });

            modelBuilder.Entity("Pluto.Models.PlutoRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Pluto.Models.PlutoUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<bool>("Disabled");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsSuperUser");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int>("UserType");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Pluto.Models.Society", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdditionalPhoneNumber");

                    b.Property<string>("AddressLine1")
                        .IsRequired();

                    b.Property<string>("AddressLine2");

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<string>("Locality");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PinCode")
                        .IsRequired();

                    b.Property<string>("State")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Society");
                });

            modelBuilder.Entity("Pluto.Models.SocietyFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FeatureTypeId");

                    b.Property<Guid>("SocietyId");

                    b.HasKey("Id");

                    b.HasIndex("FeatureTypeId");

                    b.HasIndex("SocietyId");

                    b.ToTable("SocietyFeature");
                });

            modelBuilder.Entity("Pluto.Models.SocietyForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FormTypeId");

                    b.Property<Guid>("SocietyId");

                    b.HasKey("Id");

                    b.HasIndex("FormTypeId");

                    b.HasIndex("SocietyId");

                    b.ToTable("SocietyForm");
                });

            modelBuilder.Entity("Pluto.Models.UserFeatureTypeMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FeatureTypeId");

                    b.Property<Guid>("RoleId");

                    b.Property<Guid>("SocietyId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FeatureTypeId");

                    b.HasIndex("RoleId");

                    b.HasIndex("SocietyId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFeatureTypeMapping");
                });

            modelBuilder.Entity("Pluto.Models.UserFormTypeMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FormTypeId");

                    b.Property<Guid>("RoleId");

                    b.Property<Guid>("SocietyId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FormTypeId");

                    b.HasIndex("RoleId");

                    b.HasIndex("SocietyId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFormTypeMapping");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Pluto.Models.PlutoRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Pluto.Models.PlutoUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Pluto.Models.PlutoUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Pluto.Models.PlutoRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pluto.Models.PlutoUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Pluto.Models.PlutoUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pluto.Models.FormInstance", b =>
                {
                    b.HasOne("Pluto.Models.FormStatus", "FormStatus")
                        .WithMany()
                        .HasForeignKey("FormStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pluto.Models.FormType", "FormType")
                        .WithMany()
                        .HasForeignKey("FormTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pluto.Models.Society", "Society")
                        .WithMany()
                        .HasForeignKey("SocietyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pluto.Models.FormInstanceApprover", b =>
                {
                    b.HasOne("Pluto.Models.FormInstance", "FormInstance")
                        .WithMany("FormInstanceApprovers")
                        .HasForeignKey("FormInstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pluto.Models.FormTypeRolePrivilege", b =>
                {
                    b.HasOne("Pluto.Models.FormType", "FormType")
                        .WithMany("FormTypeRolePrivileges")
                        .HasForeignKey("FormTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pluto.Models.PlutoRole", "Roles")
                        .WithMany("FormTypeRolePrivileges")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pluto.Models.SocietyFeature", b =>
                {
                    b.HasOne("Pluto.Models.FeatureType", "FeatureType")
                        .WithMany("SocietyFeatures")
                        .HasForeignKey("FeatureTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pluto.Models.Society", "Society")
                        .WithMany("SocietyFeatures")
                        .HasForeignKey("SocietyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pluto.Models.SocietyForm", b =>
                {
                    b.HasOne("Pluto.Models.FormType", "FormType")
                        .WithMany("SocietyForms")
                        .HasForeignKey("FormTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pluto.Models.Society", "Society")
                        .WithMany("SocietyForms")
                        .HasForeignKey("SocietyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pluto.Models.UserFeatureTypeMapping", b =>
                {
                    b.HasOne("Pluto.Models.FeatureType", "FeatureType")
                        .WithMany("UserFeatureTypeMappings")
                        .HasForeignKey("FeatureTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pluto.Models.PlutoRole", "Roles")
                        .WithMany("UserFeatureTypeMappings")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pluto.Models.Society", "Society")
                        .WithMany("UserFeatureTypeMappings")
                        .HasForeignKey("SocietyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pluto.Models.PlutoUser", "Users")
                        .WithMany("UserFeatureTypeMappings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pluto.Models.UserFormTypeMapping", b =>
                {
                    b.HasOne("Pluto.Models.FormType", "FormType")
                        .WithMany("UserFormTypeMappings")
                        .HasForeignKey("FormTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pluto.Models.PlutoRole", "Roles")
                        .WithMany("UserFormTypeMappings")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pluto.Models.Society", "Society")
                        .WithMany("UserFormTypeMappings")
                        .HasForeignKey("SocietyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pluto.Models.PlutoUser", "Users")
                        .WithMany("UserFormTypeMappings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
